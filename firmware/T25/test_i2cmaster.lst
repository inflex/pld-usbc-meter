   1               		.file	"test_i2cmaster.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB0:
  15               		.file 1 "test_i2cmaster.c"
   1:test_i2cmaster.c **** /****************************************************************************
   2:test_i2cmaster.c **** Title:    Access serial EEPROM 24C02 using I2C interace
   3:test_i2cmaster.c **** Author:   Peter Fleury <pfleury@gmx.ch>
   4:test_i2cmaster.c **** File:     $Id: test_i2cmaster.c,v 1.3 2015/09/16 09:29:24 peter Exp $
   5:test_i2cmaster.c **** Software: AVR-GCC 4.x
   6:test_i2cmaster.c **** Hardware: any AVR device can be used when using i2cmaster.S or any
   7:test_i2cmaster.c ****           AVR device with hardware TWI interface when using twimaster.c
   8:test_i2cmaster.c **** 
   9:test_i2cmaster.c **** Description:
  10:test_i2cmaster.c ****     This example shows how the I2C/TWI library i2cmaster.S or twimaster.c 
  11:test_i2cmaster.c **** 	can be used to access a serial eeprom.
  12:test_i2cmaster.c ****  
  13:test_i2cmaster.c **** *****************************************************************************/
  14:test_i2cmaster.c **** #include <avr/io.h>
  15:test_i2cmaster.c **** #include "i2cmaster.h"
  16:test_i2cmaster.c **** 
  17:test_i2cmaster.c **** 
  18:test_i2cmaster.c **** #define Dev24C02  0xA2      // device address of EEPROM 24C02, see datasheet
  19:test_i2cmaster.c **** 
  20:test_i2cmaster.c **** 
  21:test_i2cmaster.c **** int main(void)
  22:test_i2cmaster.c **** {
  16               		.loc 1 22 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  23:test_i2cmaster.c ****     unsigned char ret;
  24:test_i2cmaster.c ****     
  25:test_i2cmaster.c **** 
  26:test_i2cmaster.c ****     DDRB  = 0xff;                              // use all pins on port B for output 
  22               		.loc 1 26 0
  23 0000 8FEF      		ldi r24,lo8(-1)
  24 0002 87BB      		out 0x17,r24
  27:test_i2cmaster.c ****     PORTB = 0xff;                              // (active low LED's )
  25               		.loc 1 27 0
  26 0004 88BB      		out 0x18,r24
  28:test_i2cmaster.c **** 
  29:test_i2cmaster.c ****     i2c_init();                                // init I2C interface
  27               		.loc 1 29 0
  28 0006 00D0      		rcall i2c_init
  29               	.LVL0:
  30:test_i2cmaster.c **** 
  31:test_i2cmaster.c ****     /* write 0x75 to eeprom address 0x05 (Byte Write) */
  32:test_i2cmaster.c ****     ret = i2c_start(Dev24C02+I2C_WRITE);       // set device address and write mode
  30               		.loc 1 32 0
  31 0008 82EA      		ldi r24,lo8(-94)
  32 000a 00D0      		rcall i2c_start
  33               	.LVL1:
  33:test_i2cmaster.c ****     if ( ret ) {
  34               		.loc 1 33 0
  35 000c 8823      		tst r24
  36 000e 01F0      		breq .L2
  34:test_i2cmaster.c ****         /* failed to issue start condition, possibly no device found */
  35:test_i2cmaster.c ****         i2c_stop();
  37               		.loc 1 35 0
  38 0010 00D0      		rcall i2c_stop
  39               	.LVL2:
  36:test_i2cmaster.c ****         PORTB=0x00;                            // activate all 8 LED to show error */
  40               		.loc 1 36 0
  41 0012 18BA      		out 0x18,__zero_reg__
  42 0014 00C0      		rjmp .L3
  43               	.LVL3:
  44               	.L2:
  37:test_i2cmaster.c ****     }else {
  38:test_i2cmaster.c ****         /* issuing start condition ok, device accessible */
  39:test_i2cmaster.c ****         i2c_write(0x05);                       // write address = 5
  45               		.loc 1 39 0
  46 0016 85E0      		ldi r24,lo8(5)
  47               	.LVL4:
  48 0018 00D0      		rcall i2c_write
  49               	.LVL5:
  40:test_i2cmaster.c ****         i2c_write(0x75);                       // ret=0 -> Ok, ret=1 -> no ACK 
  50               		.loc 1 40 0
  51 001a 85E7      		ldi r24,lo8(117)
  52 001c 00D0      		rcall i2c_write
  53               	.LVL6:
  41:test_i2cmaster.c ****         i2c_stop();                            // set stop conditon = release bus
  54               		.loc 1 41 0
  55 001e 00D0      		rcall i2c_stop
  56               	.LVL7:
  42:test_i2cmaster.c **** 
  43:test_i2cmaster.c ****         /* write ok, read value back from eeprom address 0x05, wait until 
  44:test_i2cmaster.c ****            the device is no longer busy from the previous write operation */
  45:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
  57               		.loc 1 45 0
  58 0020 82EA      		ldi r24,lo8(-94)
  59 0022 00D0      		rcall i2c_start_wait
  60               	.LVL8:
  46:test_i2cmaster.c ****         i2c_write(0x05);                        // write address = 5
  61               		.loc 1 46 0
  62 0024 85E0      		ldi r24,lo8(5)
  63 0026 00D0      		rcall i2c_write
  64               	.LVL9:
  47:test_i2cmaster.c ****         i2c_rep_start(Dev24C02+I2C_READ);       // set device address and read mode
  65               		.loc 1 47 0
  66 0028 83EA      		ldi r24,lo8(-93)
  67 002a 00D0      		rcall i2c_rep_start
  68               	.LVL10:
  48:test_i2cmaster.c ****         ret = i2c_readNak();                    // read one byte
  69               		.loc 1 48 0
  70 002c 00D0      		rcall i2c_readNak
  71               	.LVL11:
  72 002e C82F      		mov r28,r24
  73               	.LVL12:
  49:test_i2cmaster.c ****         i2c_stop();
  74               		.loc 1 49 0
  75 0030 00D0      		rcall i2c_stop
  76               	.LVL13:
  50:test_i2cmaster.c ****         
  51:test_i2cmaster.c ****         PORTB = ~ret;                           // output byte on the LED's
  77               		.loc 1 51 0
  78 0032 C095      		com r28
  79               	.LVL14:
  80 0034 C8BB      		out 0x18,r28
  52:test_i2cmaster.c **** 
  53:test_i2cmaster.c ****         /* write 0x70,0x71,072,073 to eeprom address 0x00..0x03 (Page Write),
  54:test_i2cmaster.c ****            wait until the device is no longer busy from the previous write operation */
  55:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
  81               		.loc 1 55 0
  82 0036 82EA      		ldi r24,lo8(-94)
  83 0038 00D0      		rcall i2c_start_wait
  84               	.LVL15:
  56:test_i2cmaster.c ****         i2c_write(0x00);                        // write start address = 0
  85               		.loc 1 56 0
  86 003a 80E0      		ldi r24,0
  87 003c 00D0      		rcall i2c_write
  88               	.LVL16:
  57:test_i2cmaster.c ****         i2c_write(0x70);                        // write data to address 0
  89               		.loc 1 57 0
  90 003e 80E7      		ldi r24,lo8(112)
  91 0040 00D0      		rcall i2c_write
  92               	.LVL17:
  58:test_i2cmaster.c ****         i2c_write(0x71);                        //    "    "   "    "    1
  93               		.loc 1 58 0
  94 0042 81E7      		ldi r24,lo8(113)
  95 0044 00D0      		rcall i2c_write
  96               	.LVL18:
  59:test_i2cmaster.c ****         i2c_write(0x72);                        //    "    "   "    "    2
  97               		.loc 1 59 0
  98 0046 82E7      		ldi r24,lo8(114)
  99 0048 00D0      		rcall i2c_write
 100               	.LVL19:
  60:test_i2cmaster.c ****         i2c_write(0x74);                        //    "    "   "    "    3
 101               		.loc 1 60 0
 102 004a 84E7      		ldi r24,lo8(116)
 103 004c 00D0      		rcall i2c_write
 104               	.LVL20:
  61:test_i2cmaster.c ****         i2c_stop();                             // set stop conditon = release bus
 105               		.loc 1 61 0
 106 004e 00D0      		rcall i2c_stop
 107               	.LVL21:
  62:test_i2cmaster.c ****     
  63:test_i2cmaster.c ****         /* write ok, read value back from eeprom address 0..3 (Sequencial Read),
  64:test_i2cmaster.c ****            wait until the device is no longer busy from the previous write operation */
  65:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);      // set device address and write mode
 108               		.loc 1 65 0
 109 0050 82EA      		ldi r24,lo8(-94)
 110 0052 00D0      		rcall i2c_start_wait
 111               	.LVL22:
  66:test_i2cmaster.c ****         i2c_write(0x00);                         // write address = 0
 112               		.loc 1 66 0
 113 0054 80E0      		ldi r24,0
 114 0056 00D0      		rcall i2c_write
 115               	.LVL23:
  67:test_i2cmaster.c ****         i2c_rep_start(Dev24C02+I2C_READ);        // set device address and read mode
 116               		.loc 1 67 0
 117 0058 83EA      		ldi r24,lo8(-93)
 118 005a 00D0      		rcall i2c_rep_start
 119               	.LVL24:
  68:test_i2cmaster.c ****         ret = i2c_readAck();                       // read one byte form address 0
 120               		.loc 1 68 0
 121 005c 00D0      		rcall i2c_readAck
 122               	.LVL25:
  69:test_i2cmaster.c ****         ret = i2c_readAck();                       //  "    "    "    "     "    1
 123               		.loc 1 69 0
 124 005e 00D0      		rcall i2c_readAck
 125               	.LVL26:
  70:test_i2cmaster.c ****         ret = i2c_readAck();                       //  "    "    "    "     "    2
 126               		.loc 1 70 0
 127 0060 00D0      		rcall i2c_readAck
 128               	.LVL27:
  71:test_i2cmaster.c ****         ret = i2c_readNak();                       //  "    "    "    "     "    3
 129               		.loc 1 71 0
 130 0062 00D0      		rcall i2c_readNak
 131               	.LVL28:
 132 0064 C82F      		mov r28,r24
 133               	.LVL29:
  72:test_i2cmaster.c ****         i2c_stop();                              // set stop condition = release bus
 134               		.loc 1 72 0
 135 0066 00D0      		rcall i2c_stop
 136               	.LVL30:
  73:test_i2cmaster.c ****     
  74:test_i2cmaster.c ****         PORTB = ~ret;                            // output byte on the LED's        
 137               		.loc 1 74 0
 138 0068 C095      		com r28
 139               	.LVL31:
 140 006a C8BB      		out 0x18,r28
 141               	.LVL32:
 142               	.L3:
 143               	.L4:
 144 006c 00C0      		rjmp .L4
 145               		.cfi_endproc
 146               	.LFE0:
 148               		.text
 149               	.Letext0:
 150               		.file 2 "i2cmaster.h"
 151               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 test_i2cmaster.c
    test_i2cmaster.s:2      *ABS*:000000000000003e __SP_H__
    test_i2cmaster.s:3      *ABS*:000000000000003d __SP_L__
    test_i2cmaster.s:4      *ABS*:000000000000003f __SREG__
    test_i2cmaster.s:5      *ABS*:0000000000000000 __tmp_reg__
    test_i2cmaster.s:6      *ABS*:0000000000000001 __zero_reg__
    test_i2cmaster.s:13     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
i2c_init
i2c_start
i2c_stop
i2c_write
i2c_start_wait
i2c_rep_start
i2c_readNak
i2c_readAck
